
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Parses and structures CV data using AI.
 *
 * - parseCv - A function that handles the CV parsing process.
 * - ParseCvInput - The input type for the parseCv function.
 * - ParseCvOutput - The return type for the parseCv function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ParseCvInputSchema = z.object({
  cvDataUri: z
    .string()
    .describe(
      'The CV document as a data URI that must include a MIME type and use Base64 encoding. Expected format: data:<mimetype>;base64,<encoded_data>.'
    ),
});
export type ParseCvInput = z.infer<typeof ParseCvInputSchema>;

const ParseCvOutputSchema = z.object({
  personalInformation: z.object({
    name: z.string().describe('The full name of the person.'),
    email: z.string().describe('The email address of the person.'),
    phone: z.string().describe('The phone number of the person.'),
    linkedin: z.string().describe('The LinkedIn profile URL of the person, if available.'),
    github: z.string().describe('The GitHub profile URL of the person, if available.'),
  }).describe('Personal contact information extracted from the CV.'),
  summary: z.string().describe('A summary or objective statement from the CV.'),
  experience: z.array(
    z.object({
      title: z.string().describe('The job title.'),
      company: z.string().describe('The name of the company.'),
      dates: z.string().describe('The start and end dates of the employment.'),
      description: z.string().describe('A description of the responsibilities and achievements.'),
    })
  ).describe('Work experience details.'),
  education: z.array(
    z.object({
      institution: z.string().describe('The name of the educational institution.'),
      degree: z.string().describe('The degree obtained.'),
      dates: z.string().describe('The graduation date or period of study.'),
      description: z.string().describe('Relevant details about the course or achievements.'),
    })
  ).describe('Education history.'),
  skills: z.array(z.string()).describe('A list of skills mentioned in the CV.'),
  projects: z.array(
    z.object({
      name: z.string().describe('The name of the project. If not explicitly stated, infer a concise name from its description (e.g., "Website Redesign", "Mobile App Development").'),
      description: z.string().describe('A brief description of the project, its goals, and outcomes.'),
      url: z.string().describe('The URL of the project, if applicable or mentioned.'),
      imagePrompt: z.string().optional().describe('A concise prompt (2-4 keywords, e.g., "tech app dashboard", "ecommerce product page") for generating a hero image for this project.'),
      imageDataUri: z.string().optional().describe('The data URI of the AI-generated hero image for this project (e.g., data:image/png;base64,...).'),
    })
  ).describe('Personal or professional projects, including those embedded within experience descriptions or other sections. Identify distinct initiatives or deliverables.'),
}).describe('Structured CV data');
export type ParseCvOutput = z.infer<typeof ParseCvOutputSchema>;

export async function parseCv(input: ParseCvInput): Promise<ParseCvOutput> {
  return parseCvFlow(input);
}

const prompt = ai.definePrompt({
  name: 'cvParserPrompt',
  input: {schema: ParseCvInputSchema},
  output: {schema: ParseCvOutputSchema},
  prompt: `You are an expert CV parser. Your job is to extract structured information from a CV document.

  Analyze the provided CV data and extract the following information:

  - Personal Information: Name, email, phone, LinkedIn profile URL, GitHub profile URL.
  - Summary: A brief summary or objective statement from the CV.
  - Experience: A list of work experiences with job title, company, dates, and description.
  - Education: A list of educational experiences with institution, degree, dates, and description.
  - Skills: A list of skills mentioned in the CV.
  - Projects: Identify and list distinct projects. These might be in a dedicated "Projects" section OR embedded within descriptions of work experience, personal initiatives, or other parts of the CV.
    For each project, extract or infer:
    1.  A concise 'name' (e.g., "Inventory Management System", "Personal Portfolio Website"). If a name isn't explicitly given, create one based on the project's focus.
    2.  A 'description' detailing what the project was about, its purpose, and key achievements or technologies used.
    3.  A 'url' if a link to the project is provided.
    4.  An 'imagePrompt': A very short (2-4 keywords) prompt suitable for an AI image generator to create a representative hero image or screenshot for this project (e.g., "mobile banking app", "data analytics dashboard", "travel blog homepage", "3D game level").
    Focus on specific deliverables, initiatives, or standalone pieces of work rather than general job responsibilities. Do not extract an imageDataUri.

  Ensure that the extracted information is accurate and well-formatted.

  Here is the CV data:
  {{media url=cvDataUri}}
  `,
});

const parseCvFlow = ai.defineFlow(
  {
    name: 'parseCvFlow',
    inputSchema: ParseCvInputSchema,
    outputSchema: ParseCvOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
