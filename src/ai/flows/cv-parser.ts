// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Parses and structures CV data using AI.
 *
 * - parseCv - A function that handles the CV parsing process.
 * - ParseCvInput - The input type for the parseCv function.
 * - ParseCvOutput - The return type for the parseCv function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ParseCvInputSchema = z.object({
  cvDataUri: z
    .string()
    .describe(
      'The CV document as a data URI that must include a MIME type and use Base64 encoding. Expected format: data:<mimetype>;base64,<encoded_data>.'
    ),
});
export type ParseCvInput = z.infer<typeof ParseCvInputSchema>;

const ParseCvOutputSchema = z.object({
  personalInformation: z.object({
    name: z.string().describe('The full name of the person.'),
    email: z.string().describe('The email address of the person.'),
    phone: z.string().describe('The phone number of the person.'),
    linkedin: z.string().describe('The LinkedIn profile URL of the person, if available.'),
    github: z.string().describe('The GitHub profile URL of the person, if available.'),
  }).describe('Personal contact information extracted from the CV.'),
  summary: z.string().describe('A summary or objective statement from the CV.'),
  experience: z.array(
    z.object({
      title: z.string().describe('The job title.'),
      company: z.string().describe('The name of the company.'),
      dates: z.string().describe('The start and end dates of the employment.'),
      description: z.string().describe('A description of the responsibilities and achievements.'),
    })
  ).describe('Work experience details.'),
  education: z.array(
    z.object({
      institution: z.string().describe('The name of the educational institution.'),
      degree: z.string().describe('The degree obtained.'),
      dates: z.string().describe('The graduation date or period of study.'),
      description: z.string().describe('Relevant details about the course or achievements.'),
    })
  ).describe('Education history.'),
  skills: z.array(z.string()).describe('A list of skills mentioned in the CV.'),
  projects: z.array(
    z.object({
      name: z.string().describe('The name of the project.'),
      description: z.string().describe('A brief description of the project.'),
      url: z.string().describe('The URL of the project, if applicable.'),
    })
  ).describe('Personal projects.'),
}).describe('Structured CV data');
export type ParseCvOutput = z.infer<typeof ParseCvOutputSchema>;

export async function parseCv(input: ParseCvInput): Promise<ParseCvOutput> {
  return parseCvFlow(input);
}

const prompt = ai.definePrompt({
  name: 'cvParserPrompt',
  input: {schema: ParseCvInputSchema},
  output: {schema: ParseCvOutputSchema},
  prompt: `You are an expert CV parser. Your job is to extract structured information from a CV document.

  Analyze the provided CV data and extract the following information:

  - Personal Information: Name, email, phone, LinkedIn profile URL, GitHub profile URL.
  - Summary: A brief summary or objective statement from the CV.
  - Experience: A list of work experiences with job title, company, dates, and description.
  - Education: A list of educational experiences with institution, degree, dates, and description.
  - Skills: A list of skills mentioned in the CV.
  - Projects: A list of personal projects with name, description, and URL.

  Ensure that the extracted information is accurate and well-formatted.

  Here is the CV data:
  {{media url=cvDataUri}}
  `,
});

const parseCvFlow = ai.defineFlow(
  {
    name: 'parseCvFlow',
    inputSchema: ParseCvInputSchema,
    outputSchema: ParseCvOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
